"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dialogs_1 = require("tns-core-modules/ui/dialogs");
var constants_1 = require("~/core/constants");
var enums_1 = require("~/core/models/domain/enums");
var modals_1 = require("~/shared/helpers/modals");
var ui_data_form_1 = require("~/shared/helpers/ui-data-form");
var detail_page_vm_1 = require("~/shared/view-models/pages/detail/detail.page.vm");
require("~/utils/converters");
var detailsVm;
var itemDetailsDataForm;
function onNavigatingTo(args) {
    var page = args.object;
    var currentItem = page.navigationContext;
    itemDetailsDataForm = page.getViewById('itemDetailsDataForm');
    detailsVm = new detail_page_vm_1.DetailViewModel(currentItem);
    page.bindingContext = detailsVm;
}
exports.onNavigatingTo = onNavigatingTo;
function onDeleteTap() {
    var options = {
        title: 'Delete Item',
        message: 'Are you sure you want to delete this item?',
        okButtonText: 'Yes',
        cancelButtonText: 'Cancel'
    };
    // confirm with options, with promise
    dialogs_1.confirm(options).then(function (result) {
        // result can be true/false/undefined
        if (result) {
            detailsVm.deleteRequested();
        }
    });
}
exports.onDeleteTap = onDeleteTap;
function onTaskToggleTap(args) {
    var textField = args.object;
    var taskVm = textField.bindingContext;
    taskVm.onTaskToggleRequested();
}
exports.onTaskToggleTap = onTaskToggleTap;
function onTaskFocused(args) {
    var textField = args.object;
    var taskVm = textField.bindingContext;
    taskVm.onTaskFocused(textField.text);
    textField.on('textChange', function () { return taskVm.onTextChange(textField.text); });
}
exports.onTaskFocused = onTaskFocused;
function onTaskBlurred(args) {
    var textField = args.object;
    var taskVm = textField.bindingContext;
    textField.off('textChange');
    taskVm.onTaskBlurred();
}
exports.onTaskBlurred = onTaskBlurred;
function onAssigneeRowTap(args) {
    var view = args.object;
    modals_1.showModalAssigneeList(view.page, detailsVm.getSelectedAssignee()).then(function (selectedAssignee) {
        if (selectedAssignee) {
            detailsVm.setSelectedAssignee(selectedAssignee);
        }
    });
}
exports.onAssigneeRowTap = onAssigneeRowTap;
function onPropertyCommitted(args) {
    var vm = args.object.bindingContext;
    itemDetailsDataForm
        .validateAll()
        .then(function (ok) {
        if (ok) {
            vm.notifyUpdateItem();
        }
    })
        .catch(function (err) {
        console.error(err);
    });
}
exports.onPropertyCommitted = onPropertyCommitted;
function onEditorUpdate(args) {
    switch (args.propertyName) {
        case 'description':
            editorSetupDescription(args.editor);
            break;
        case 'typeStr':
            editorSetupType(args.editor);
            break;
        case 'estimate':
            editorSetupEstimate(args.editor);
            break;
        case 'priorityStr':
            editorSetupPriority(args.editor);
            break;
    }
}
exports.onEditorUpdate = onEditorUpdate;
function editorSetupDescription(editor) {
    ui_data_form_1.setMultiLineEditorFontSize(editor, 17);
}
function editorSetupType(editor) {
    ui_data_form_1.setPickerEditorImageLocation(editor);
    var selectedTypeValue = ui_data_form_1.getPickerEditorValueText(editor);
    detailsVm.updateSelectedTypeValue(selectedTypeValue);
}
function editorSetupEstimate(editor) {
    ui_data_form_1.setStepperEditorContentOffset(editor, -25, 0);
    ui_data_form_1.setStepperEditorTextPostfix(editor, 'point', 'points');
    ui_data_form_1.setStepperEditorColors(editor, constants_1.COLOR_LIGHT, constants_1.COLOR_DARK);
}
function editorSetupPriority(editor) {
    var editorPriority = editor.value;
    var selectedPriorityValue = detailsVm.updateSelectedPriorityValue(editorPriority);
    ui_data_form_1.setSegmentedEditorColor(editor, enums_1.PriorityEnum.getColor(selectedPriorityValue));
}
//# sourceMappingURL=data:application/json;base64,