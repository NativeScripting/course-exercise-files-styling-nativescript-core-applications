"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ui_data_form_1 = require("~/shared/helpers/ui-data-form");
var new_item_modal_vm_1 = require("~/shared/view-models/modals/new-item/new-item.modal.vm");
var textInputModalVm = null;
var itemDetailsDataForm;
function onShownModally(args) {
    var page = args.object;
    itemDetailsDataForm = page.getViewById('itemDetailsDataForm');
    textInputModalVm = new new_item_modal_vm_1.NewItemModalViewModel(args.closeCallback);
    page.bindingContext = textInputModalVm;
}
exports.onShownModally = onShownModally;
function onCancelButtonTap() {
    textInputModalVm.onCancelButtonTapHandler();
}
exports.onCancelButtonTap = onCancelButtonTap;
function onOkButtonTap() {
    itemDetailsDataForm.validateAndCommitAll().then(function (ok) {
        if (ok) {
            textInputModalVm.onOkButtonTapHandler();
        }
    });
}
exports.onOkButtonTap = onOkButtonTap;
function onEditorUpdate(args) {
    switch (args.propertyName) {
        case 'title':
            editorSetupMultiLine(args.editor);
            break;
        case 'description':
            editorSetupMultiLine(args.editor);
            break;
        case 'typeStr':
            editorSetupType(args.editor);
            break;
    }
}
exports.onEditorUpdate = onEditorUpdate;
function editorSetupMultiLine(editor) {
    ui_data_form_1.setMultiLineEditorFontSize(editor, 17);
}
function editorSetupType(editor) {
    ui_data_form_1.setPickerEditorImageLocation(editor);
    var selectedTypeValue = ui_data_form_1.getPickerEditorValueText(editor);
    textInputModalVm.updateSelectedTypeValue(selectedTypeValue);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3LWl0ZW0ubW9kYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZXctaXRlbS5tb2RhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLDhEQUl1QztBQUN2Qyw0RkFBK0Y7QUFFL0YsSUFBSSxnQkFBZ0IsR0FBMEIsSUFBSSxDQUFDO0FBQ25ELElBQUksbUJBQWdDLENBQUM7QUFFckMsU0FBZ0IsY0FBYyxDQUFDLElBQXNCO0lBQ25ELElBQU0sSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDL0IsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzlELGdCQUFnQixHQUFHLElBQUkseUNBQXFCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2pFLElBQUksQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDekMsQ0FBQztBQUxELHdDQUtDO0FBRUQsU0FBZ0IsaUJBQWlCO0lBQy9CLGdCQUFnQixDQUFDLHdCQUF3QixFQUFFLENBQUM7QUFDOUMsQ0FBQztBQUZELDhDQUVDO0FBRUQsU0FBZ0IsYUFBYTtJQUMzQixtQkFBbUIsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7UUFDaEQsSUFBSSxFQUFFLEVBQUU7WUFDTixnQkFBZ0IsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBTkQsc0NBTUM7QUFFRCxTQUFnQixjQUFjLENBQUMsSUFBdUI7SUFDcEQsUUFBUSxJQUFJLENBQUMsWUFBWSxFQUFFO1FBQ3pCLEtBQUssT0FBTztZQUNWLG9CQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQyxNQUFNO1FBQ1IsS0FBSyxhQUFhO1lBQ2hCLG9CQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQyxNQUFNO1FBQ1IsS0FBSyxTQUFTO1lBQ1osZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3QixNQUFNO0tBQ1Q7QUFDSCxDQUFDO0FBWkQsd0NBWUM7QUFFRCxTQUFTLG9CQUFvQixDQUFDLE1BQU07SUFDbEMseUNBQTBCLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxNQUFNO0lBQzdCLDJDQUE0QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLElBQU0saUJBQWlCLEdBQWUsdUNBQXdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkUsZ0JBQWdCLENBQUMsdUJBQXVCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM5RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YUZvcm1FdmVudERhdGEsIFJhZERhdGFGb3JtIH0gZnJvbSAnbmF0aXZlc2NyaXB0LXVpLWRhdGFmb3JtJztcbmltcG9ydCB7IFBhZ2UsIFNob3duTW9kYWxseURhdGEgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UnO1xuaW1wb3J0IHsgUHRJdGVtVHlwZSB9IGZyb20gJ34vY29yZS9tb2RlbHMvZG9tYWluL3R5cGVzJztcbmltcG9ydCB7XG4gIGdldFBpY2tlckVkaXRvclZhbHVlVGV4dCxcbiAgc2V0TXVsdGlMaW5lRWRpdG9yRm9udFNpemUsXG4gIHNldFBpY2tlckVkaXRvckltYWdlTG9jYXRpb25cbn0gZnJvbSAnfi9zaGFyZWQvaGVscGVycy91aS1kYXRhLWZvcm0nO1xuaW1wb3J0IHsgTmV3SXRlbU1vZGFsVmlld01vZGVsIH0gZnJvbSAnfi9zaGFyZWQvdmlldy1tb2RlbHMvbW9kYWxzL25ldy1pdGVtL25ldy1pdGVtLm1vZGFsLnZtJztcblxubGV0IHRleHRJbnB1dE1vZGFsVm06IE5ld0l0ZW1Nb2RhbFZpZXdNb2RlbCA9IG51bGw7XG5sZXQgaXRlbURldGFpbHNEYXRhRm9ybTogUmFkRGF0YUZvcm07XG5cbmV4cG9ydCBmdW5jdGlvbiBvblNob3duTW9kYWxseShhcmdzOiBTaG93bk1vZGFsbHlEYXRhKTogdm9pZCB7XG4gIGNvbnN0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgaXRlbURldGFpbHNEYXRhRm9ybSA9IHBhZ2UuZ2V0Vmlld0J5SWQoJ2l0ZW1EZXRhaWxzRGF0YUZvcm0nKTtcbiAgdGV4dElucHV0TW9kYWxWbSA9IG5ldyBOZXdJdGVtTW9kYWxWaWV3TW9kZWwoYXJncy5jbG9zZUNhbGxiYWNrKTtcbiAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHRleHRJbnB1dE1vZGFsVm07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkNhbmNlbEJ1dHRvblRhcCgpOiB2b2lkIHtcbiAgdGV4dElucHV0TW9kYWxWbS5vbkNhbmNlbEJ1dHRvblRhcEhhbmRsZXIoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uT2tCdXR0b25UYXAoKTogdm9pZCB7XG4gIGl0ZW1EZXRhaWxzRGF0YUZvcm0udmFsaWRhdGVBbmRDb21taXRBbGwoKS50aGVuKG9rID0+IHtcbiAgICBpZiAob2spIHtcbiAgICAgIHRleHRJbnB1dE1vZGFsVm0ub25Pa0J1dHRvblRhcEhhbmRsZXIoKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25FZGl0b3JVcGRhdGUoYXJnczogRGF0YUZvcm1FdmVudERhdGEpIHtcbiAgc3dpdGNoIChhcmdzLnByb3BlcnR5TmFtZSkge1xuICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgIGVkaXRvclNldHVwTXVsdGlMaW5lKGFyZ3MuZWRpdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Rlc2NyaXB0aW9uJzpcbiAgICAgIGVkaXRvclNldHVwTXVsdGlMaW5lKGFyZ3MuZWRpdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3R5cGVTdHInOlxuICAgICAgZWRpdG9yU2V0dXBUeXBlKGFyZ3MuZWRpdG9yKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVkaXRvclNldHVwTXVsdGlMaW5lKGVkaXRvcikge1xuICBzZXRNdWx0aUxpbmVFZGl0b3JGb250U2l6ZShlZGl0b3IsIDE3KTtcbn1cblxuZnVuY3Rpb24gZWRpdG9yU2V0dXBUeXBlKGVkaXRvcikge1xuICBzZXRQaWNrZXJFZGl0b3JJbWFnZUxvY2F0aW9uKGVkaXRvcik7XG4gIGNvbnN0IHNlbGVjdGVkVHlwZVZhbHVlID0gPFB0SXRlbVR5cGU+Z2V0UGlja2VyRWRpdG9yVmFsdWVUZXh0KGVkaXRvcik7XG4gIHRleHRJbnB1dE1vZGFsVm0udXBkYXRlU2VsZWN0ZWRUeXBlVmFsdWUoc2VsZWN0ZWRUeXBlVmFsdWUpO1xufVxuIl19