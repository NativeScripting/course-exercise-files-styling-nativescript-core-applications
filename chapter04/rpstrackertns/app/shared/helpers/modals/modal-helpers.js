"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var strings_1 = require("~/core/models/domain/constants/strings");
var routes_1 = require("~/core/routes");
var locator_1 = require("~/globals/dependencies/locator");
var modals_1 = require("~/shared/helpers/modals");
var modalIsShowing = false;
function createPtModalContext(title, payload, defaultResult, btnOkText, btnCancelText) {
    if (defaultResult === void 0) { defaultResult = null; }
    if (btnOkText === void 0) { btnOkText = 'Done'; }
    if (btnCancelText === void 0) { btnCancelText = 'Cancel'; }
    return {
        title: title,
        payload: payload,
        defaultResult: defaultResult,
        btnOkText: btnOkText,
        btnCancelText: btnCancelText
    };
}
exports.createPtModalContext = createPtModalContext;
function createModal(page, route, context) {
    if (modalIsShowing) {
        return Promise.reject('A modal dialog is already showing.');
    }
    return new Promise(function (resolve) {
        modalIsShowing = true;
        page.showModal(route, context, function (result) {
            resolve(result);
            modalIsShowing = false;
        }, true);
    });
}
function showModalTextInput(page, context) {
    return createModal(page, routes_1.ROUTES.textInputModal, context);
}
exports.showModalTextInput = showModalTextInput;
function showModalListSelector(page, context) {
    return createModal(page, routes_1.ROUTES.listSelectorModal, context);
}
exports.showModalListSelector = showModalListSelector;
function showModal(page, route, fullscreen, context) {
    return new Promise(function (resolve) {
        page.showModal(route, context, resolve, fullscreen);
    });
}
exports.showModal = showModal;
function showModalAssigneeList(page, currentAssignee) {
    var userService = locator_1.getUserService();
    return new Promise(function (resolve) {
        userService.fetchUsers().then(function (users) {
            var items = users.map(modals_1.ptUserToModalListDisplayItem);
            var defaultItem = modals_1.ptUserToModalListDisplayItem(currentAssignee);
            var ctx = createPtModalContext('Select Assignee', items, defaultItem, strings_1.EMPTY_STRING, 'Cancel');
            showModalListSelector(page, ctx).then(function (modalItem) {
                resolve(modalItem.payload);
            });
        });
    });
}
exports.showModalAssigneeList = showModalAssigneeList;
function showModalNewItem(page) {
    var context = {
        btnOkText: 'Save'
    };
    return showModal(page, routes_1.ROUTES.newItemModal, true, context);
}
exports.showModalNewItem = showModalNewItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vZGFsLWhlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrRUFBc0U7QUFDdEUsd0NBQXVDO0FBQ3ZDLDBEQUFnRTtBQUNoRSxrREFJaUM7QUFFakMsSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBRTNCLFNBQWdCLG9CQUFvQixDQUNsQyxLQUFhLEVBQ2IsT0FBVSxFQUNWLGFBQXVCLEVBQ3ZCLFNBQTBCLEVBQzFCLGFBQWdDO0lBRmhDLDhCQUFBLEVBQUEsb0JBQXVCO0lBQ3ZCLDBCQUFBLEVBQUEsa0JBQTBCO0lBQzFCLDhCQUFBLEVBQUEsd0JBQWdDO0lBRWhDLE9BQU87UUFDTCxLQUFLLE9BQUE7UUFDTCxPQUFPLFNBQUE7UUFDUCxhQUFhLGVBQUE7UUFDYixTQUFTLFdBQUE7UUFDVCxhQUFhLGVBQUE7S0FDZCxDQUFDO0FBQ0osQ0FBQztBQWRELG9EQWNDO0FBRUQsU0FBUyxXQUFXLENBQ2xCLElBQVUsRUFDVixLQUFhLEVBQ2IsT0FBNkI7SUFFN0IsSUFBSSxjQUFjLEVBQUU7UUFDbEIsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFJLG9DQUFvQyxDQUFDLENBQUM7S0FDaEU7SUFFRCxPQUFPLElBQUksT0FBTyxDQUFJLFVBQUEsT0FBTztRQUMzQixjQUFjLEdBQUcsSUFBSSxDQUFDO1FBRXRCLElBQUksQ0FBQyxTQUFTLENBQ1osS0FBSyxFQUNMLE9BQU8sRUFDUCxVQUFBLE1BQU07WUFDSixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDaEIsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUN6QixDQUFDLEVBQ0QsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxTQUFnQixrQkFBa0IsQ0FDaEMsSUFBVSxFQUNWLE9BQXVDO0lBRXZDLE9BQU8sV0FBVyxDQUFpQixJQUFJLEVBQUUsZUFBTSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBTEQsZ0RBS0M7QUFFRCxTQUFnQixxQkFBcUIsQ0FDbkMsSUFBVSxFQUNWLE9BR0M7SUFFRCxPQUFPLFdBQVcsQ0FDaEIsSUFBSSxFQUNKLGVBQU0sQ0FBQyxpQkFBaUIsRUFDeEIsT0FBTyxDQUNSLENBQUM7QUFDSixDQUFDO0FBWkQsc0RBWUM7QUFFRCxTQUFnQixTQUFTLENBQ3ZCLElBQVUsRUFDVixLQUFhLEVBQ2IsVUFBbUIsRUFDbkIsT0FBWTtJQUVaLE9BQU8sSUFBSSxPQUFPLENBQUksVUFBQSxPQUFPO1FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBVEQsOEJBU0M7QUFFRCxTQUFnQixxQkFBcUIsQ0FDbkMsSUFBVSxFQUNWLGVBQXVCO0lBRXZCLElBQU0sV0FBVyxHQUFHLHdCQUFjLEVBQUUsQ0FBQztJQUVyQyxPQUFPLElBQUksT0FBTyxDQUFTLFVBQUEsT0FBTztRQUNoQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUEsS0FBSztZQUNqQyxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLHFDQUE0QixDQUFDLENBQUM7WUFDdEQsSUFBTSxXQUFXLEdBQUcscUNBQTRCLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFbEUsSUFBTSxHQUFHLEdBQUcsb0JBQW9CLENBRzlCLGlCQUFpQixFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsc0JBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUVqRSxxQkFBcUIsQ0FBUyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsU0FBUztnQkFDckQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBckJELHNEQXFCQztBQUVELFNBQWdCLGdCQUFnQixDQUFJLElBQVU7SUFDNUMsSUFBTSxPQUFPLEdBQUc7UUFDZCxTQUFTLEVBQUUsTUFBTTtLQUNsQixDQUFDO0lBQ0YsT0FBTyxTQUFTLENBQUksSUFBSSxFQUFFLGVBQU0sQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFMRCw0Q0FLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2UgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UnO1xuaW1wb3J0IHsgUHRVc2VyIH0gZnJvbSAnfi9jb3JlL21vZGVscy9kb21haW4nO1xuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSAnfi9jb3JlL21vZGVscy9kb21haW4vY29uc3RhbnRzL3N0cmluZ3MnO1xuaW1wb3J0IHsgUk9VVEVTIH0gZnJvbSAnfi9jb3JlL3JvdXRlcyc7XG5pbXBvcnQgeyBnZXRVc2VyU2VydmljZSB9IGZyb20gJ34vZ2xvYmFscy9kZXBlbmRlbmNpZXMvbG9jYXRvcic7XG5pbXBvcnQge1xuICBQdE1vZGFsQ29udGV4dCxcbiAgUHRNb2RhbExpc3REaXNwbGF5SXRlbSxcbiAgcHRVc2VyVG9Nb2RhbExpc3REaXNwbGF5SXRlbVxufSBmcm9tICd+L3NoYXJlZC9oZWxwZXJzL21vZGFscyc7XG5cbmxldCBtb2RhbElzU2hvd2luZyA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHRNb2RhbENvbnRleHQ8VCwgUj4oXG4gIHRpdGxlOiBzdHJpbmcsXG4gIHBheWxvYWQ6IFQsXG4gIGRlZmF1bHRSZXN1bHQ6IFIgPSBudWxsLFxuICBidG5Pa1RleHQ6IHN0cmluZyA9ICdEb25lJyxcbiAgYnRuQ2FuY2VsVGV4dDogc3RyaW5nID0gJ0NhbmNlbCdcbik6IFB0TW9kYWxDb250ZXh0PFQsIFI+IHtcbiAgcmV0dXJuIHtcbiAgICB0aXRsZSxcbiAgICBwYXlsb2FkLFxuICAgIGRlZmF1bHRSZXN1bHQsXG4gICAgYnRuT2tUZXh0LFxuICAgIGJ0bkNhbmNlbFRleHRcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kYWw8VCwgUj4oXG4gIHBhZ2U6IFBhZ2UsXG4gIHJvdXRlOiBzdHJpbmcsXG4gIGNvbnRleHQ6IFB0TW9kYWxDb250ZXh0PFQsIFI+XG4pOiBQcm9taXNlPFI+IHtcbiAgaWYgKG1vZGFsSXNTaG93aW5nKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0PFI+KCdBIG1vZGFsIGRpYWxvZyBpcyBhbHJlYWR5IHNob3dpbmcuJyk7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2U8Uj4ocmVzb2x2ZSA9PiB7XG4gICAgbW9kYWxJc1Nob3dpbmcgPSB0cnVlO1xuXG4gICAgcGFnZS5zaG93TW9kYWwoXG4gICAgICByb3V0ZSxcbiAgICAgIGNvbnRleHQsXG4gICAgICByZXN1bHQgPT4ge1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIG1vZGFsSXNTaG93aW5nID0gZmFsc2U7XG4gICAgICB9LFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd01vZGFsVGV4dElucHV0KFxuICBwYWdlOiBQYWdlLFxuICBjb250ZXh0OiBQdE1vZGFsQ29udGV4dDxzdHJpbmcsIHN0cmluZz5cbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIHJldHVybiBjcmVhdGVNb2RhbDxzdHJpbmcsIHN0cmluZz4ocGFnZSwgUk9VVEVTLnRleHRJbnB1dE1vZGFsLCBjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dNb2RhbExpc3RTZWxlY3RvcjxUPihcbiAgcGFnZTogUGFnZSxcbiAgY29udGV4dDogUHRNb2RhbENvbnRleHQ8XG4gICAgUHRNb2RhbExpc3REaXNwbGF5SXRlbTxUPltdLFxuICAgIFB0TW9kYWxMaXN0RGlzcGxheUl0ZW08VD5cbiAgPlxuKTogUHJvbWlzZTxQdE1vZGFsTGlzdERpc3BsYXlJdGVtPFQ+PiB7XG4gIHJldHVybiBjcmVhdGVNb2RhbDxQdE1vZGFsTGlzdERpc3BsYXlJdGVtPFQ+W10sIFB0TW9kYWxMaXN0RGlzcGxheUl0ZW08VD4+KFxuICAgIHBhZ2UsXG4gICAgUk9VVEVTLmxpc3RTZWxlY3Rvck1vZGFsLFxuICAgIGNvbnRleHRcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dNb2RhbDxUPihcbiAgcGFnZTogUGFnZSxcbiAgcm91dGU6IHN0cmluZyxcbiAgZnVsbHNjcmVlbjogYm9vbGVhbixcbiAgY29udGV4dDogYW55XG4pOiBQcm9taXNlPFQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPFQ+KHJlc29sdmUgPT4ge1xuICAgIHBhZ2Uuc2hvd01vZGFsKHJvdXRlLCBjb250ZXh0LCByZXNvbHZlLCBmdWxsc2NyZWVuKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93TW9kYWxBc3NpZ25lZUxpc3QoXG4gIHBhZ2U6IFBhZ2UsXG4gIGN1cnJlbnRBc3NpZ25lZTogUHRVc2VyXG4pOiBQcm9taXNlPFB0VXNlcj4ge1xuICBjb25zdCB1c2VyU2VydmljZSA9IGdldFVzZXJTZXJ2aWNlKCk7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlPFB0VXNlcj4ocmVzb2x2ZSA9PiB7XG4gICAgdXNlclNlcnZpY2UuZmV0Y2hVc2VycygpLnRoZW4odXNlcnMgPT4ge1xuICAgICAgY29uc3QgaXRlbXMgPSB1c2Vycy5tYXAocHRVc2VyVG9Nb2RhbExpc3REaXNwbGF5SXRlbSk7XG4gICAgICBjb25zdCBkZWZhdWx0SXRlbSA9IHB0VXNlclRvTW9kYWxMaXN0RGlzcGxheUl0ZW0oY3VycmVudEFzc2lnbmVlKTtcblxuICAgICAgY29uc3QgY3R4ID0gY3JlYXRlUHRNb2RhbENvbnRleHQ8XG4gICAgICAgIFB0TW9kYWxMaXN0RGlzcGxheUl0ZW08UHRVc2VyPltdLFxuICAgICAgICBQdE1vZGFsTGlzdERpc3BsYXlJdGVtPFB0VXNlcj5cbiAgICAgID4oJ1NlbGVjdCBBc3NpZ25lZScsIGl0ZW1zLCBkZWZhdWx0SXRlbSwgRU1QVFlfU1RSSU5HLCAnQ2FuY2VsJyk7XG5cbiAgICAgIHNob3dNb2RhbExpc3RTZWxlY3RvcjxQdFVzZXI+KHBhZ2UsIGN0eCkudGhlbihtb2RhbEl0ZW0gPT4ge1xuICAgICAgICByZXNvbHZlKG1vZGFsSXRlbS5wYXlsb2FkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dNb2RhbE5ld0l0ZW08VD4ocGFnZTogUGFnZSk6IFByb21pc2U8VD4ge1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGJ0bk9rVGV4dDogJ1NhdmUnXG4gIH07XG4gIHJldHVybiBzaG93TW9kYWw8VD4ocGFnZSwgUk9VVEVTLm5ld0l0ZW1Nb2RhbCwgdHJ1ZSwgY29udGV4dCk7XG59XG4iXX0=