"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("~/core/models/domain/enums");
var services_1 = require("~/core/services");
// const SELECTED_PRESET = 'SELECTED_PRESET';
// const BACKLOG_ITEMS = 'BACKLOG_ITEMS';
var BacklogService = /** @class */ (function () {
    function BacklogService(loggingService, backlogRepo, appStateService) {
        this.loggingService = loggingService;
        this.backlogRepo = backlogRepo;
        this.appStateService = appStateService;
    }
    BacklogService.prototype.getCurrentPreset = function () {
        var curPre = this.appStateService.getStateItem('selectedPreset');
        if (curPre) {
            return curPre;
        }
        else {
            return 'open';
        }
    };
    BacklogService.prototype.setPreset = function (preset) {
        var curPreset = this.appStateService.getStateItem('selectedPreset');
        if (curPreset !== preset) {
            this.appStateService.setStateItem('selectedPreset', preset);
        }
        return Promise.resolve();
    };
    BacklogService.prototype.fetchItems = function (fetchItemsRequest) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.backlogRepo.fetchPtItems(fetchItemsRequest.currentPreset, fetchItemsRequest.currentUserId, function (error) {
                _this.loggingService.error('Fetch items failed');
                reject(error);
            }, function (ptItems) {
                ptItems.forEach(function (i) {
                    services_1.setUserAvatar(_this.backlogRepo.apiEndpoint, i.assignee);
                    i.comments.forEach(function (c) {
                        return services_1.setUserAvatar(_this.backlogRepo.apiEndpoint, c.user);
                    });
                });
                // this.storageService.setItem(BACKLOG_ITEMS, ptItems);
                _this.appStateService.setStateItem('backlogItems', ptItems);
                var response = {
                    items: ptItems
                };
                resolve(response);
            });
        });
    };
    BacklogService.prototype.getPtItem = function (fetchSingleItemRequest) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.backlogRepo.getPtItem(fetchSingleItemRequest.ptItemId, function (error) {
                _this.loggingService.error('Fetch items failed');
                reject(error);
            }, function (ptItem) {
                services_1.setUserAvatar(_this.backlogRepo.apiEndpoint, ptItem.assignee);
                ptItem.comments.forEach(function (c) {
                    return services_1.setUserAvatar(_this.backlogRepo.apiEndpoint, c.user);
                });
                _this.appStateService.setStateItem('currentSelectedItem', ptItem);
                var response = {
                    item: ptItem
                };
                resolve(response);
            });
        });
    };
    BacklogService.prototype.getItemFromCacheOrServer = function (fetchSingleItemRequest) {
        var allLocalItems = this.appStateService.getStateItem('backlogItems');
        var selectedItem = allLocalItems.find(function (i) { return i.id === fetchSingleItemRequest.ptItemId; });
        if (selectedItem) {
            this.appStateService.setStateItem('currentSelectedItem', selectedItem);
            var response = {
                item: selectedItem
            };
            return Promise.resolve(response);
        }
        else {
            return this.getPtItem(fetchSingleItemRequest);
        }
    };
    BacklogService.prototype.addNewPtItem = function (createItemRequest) {
        var _this = this;
        var item = {
            id: 0,
            title: createItemRequest.newItem.title,
            description: createItemRequest.newItem.description,
            type: createItemRequest.newItem.type,
            estimate: 0,
            priority: enums_1.PriorityEnum.Medium,
            status: enums_1.StatusEnum.Open,
            assignee: createItemRequest.assignee,
            tasks: [],
            comments: [],
            dateCreated: new Date(),
            dateModified: new Date()
        };
        return new Promise(function (resolve, reject) {
            _this.backlogRepo.insertPtItem(item, function (error) {
                _this.loggingService.error('Adding new item failed');
                reject(error);
            }, function (nextItem) {
                services_1.setUserAvatar(_this.backlogRepo.apiEndpoint, nextItem.assignee);
                /*
                this.storageService.setItem(BACKLOG_ITEMS, [
                  nextItem,
                  ...this.storageService.getItem<PtItem[]>(BACKLOG_ITEMS)
                ]);
                */
                _this.appStateService.setStateItem('backlogItems', [
                    nextItem
                ].concat(_this.appStateService.getStateItem('backlogItems')));
                var response = {
                    createdItem: nextItem
                };
                resolve(response);
            });
        });
    };
    BacklogService.prototype.updatePtItem = function (updateItemRequest) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.backlogRepo.updatePtItem(updateItemRequest.itemToUpdate, function (error) {
                _this.loggingService.error('Updating item failed');
                reject(error);
            }, function (updatedItem) {
                var response = {
                    updatedItem: updatedItem
                };
                resolve(response);
            });
        });
    };
    BacklogService.prototype.deletePtItem = function (deleteItemRequest) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.backlogRepo.deletePtItem(deleteItemRequest.itemToDelete.id, function (error) {
                _this.loggingService.error('Deleting item failed');
                reject(error);
            }, function () {
                /*
                const backlogItems = this.storageService.getItem<PtItem[]>(
                  BACKLOG_ITEMS
                );
                */
                var backlogItems = _this.appStateService.getStateItem('backlogItems');
                var updatedItems = backlogItems.filter(function (i) {
                    return i.id !== deleteItemRequest.itemToDelete.id;
                });
                // this.storageService.setItem(BACKLOG_ITEMS, updatedItems);
                _this.appStateService.setStateItem('backlogItems', updatedItems);
                var response = {
                    deleted: true
                };
                resolve(response);
            });
        });
    };
    return BacklogService;
}());
exports.BacklogService = BacklogService;
//# sourceMappingURL=data:application/json;base64,